//! Autogenerated weights for pallet_restricted_tokens
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-01-27, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("development"), DB CACHE: 128

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// --chain=development
// --steps=50
// --repeat=20
// --pallet=pallet-restricted-tokens
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=pallets/restricted-tokens/src/weights.rs
// --template=./scripts/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_restricted_tokens.
pub trait WeightInfo {
	fn transfer_native() -> Weight;
	fn transfer_other() -> Weight;
	fn transfer_keep_alive_native() -> Weight;
	fn transfer_keep_alive_other() -> Weight;
	fn transfer_all_native() -> Weight;
	fn transfer_all_other() -> Weight;
	fn force_transfer_native() -> Weight;
	fn force_transfer_other() -> Weight;
	fn set_balance_native() -> Weight;
	fn set_balance_other() -> Weight;
}

/// Weights for pallet_restricted_tokens using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn transfer_native() -> Weight {
		(Weight::from_ref_time(117_000_000))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	fn transfer_other() -> Weight {
		(Weight::from_ref_time(111_000_000))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}

	fn transfer_keep_alive_native() -> Weight {
		(Weight::from_ref_time(84_000_000))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	fn transfer_keep_alive_other() -> Weight {
		(Weight::from_ref_time(100_000_000))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}

	fn transfer_all_native() -> Weight {
		(Weight::from_ref_time(101_000_000))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	fn transfer_all_other() -> Weight {
		(Weight::from_ref_time(118_000_000))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}

	fn force_transfer_native() -> Weight {
		(Weight::from_ref_time(95_000_000))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	fn force_transfer_other() -> Weight {
		(Weight::from_ref_time(105_000_000))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}

	fn set_balance_native() -> Weight {
		(Weight::from_ref_time(116_000_000))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	fn set_balance_other() -> Weight {
		(Weight::from_ref_time(105_000_000))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn transfer_native() -> Weight {
		(Weight::from_ref_time(117_000_000))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn transfer_other() -> Weight {
		(Weight::from_ref_time(111_000_000))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}

	fn transfer_keep_alive_native() -> Weight {
		(Weight::from_ref_time(84_000_000))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn transfer_keep_alive_other() -> Weight {
		(Weight::from_ref_time(100_000_000))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}

	fn transfer_all_native() -> Weight {
		(Weight::from_ref_time(101_000_000))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn transfer_all_other() -> Weight {
		(Weight::from_ref_time(118_000_000))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}

	fn force_transfer_native() -> Weight {
		(Weight::from_ref_time(95_000_000))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn force_transfer_other() -> Weight {
		(Weight::from_ref_time(105_000_000))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}

	fn set_balance_native() -> Weight {
		(Weight::from_ref_time(116_000_000))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn set_balance_other() -> Weight {
		(Weight::from_ref_time(105_000_000))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
