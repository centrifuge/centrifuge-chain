//! Autogenerated weights for pallet_loans
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-27, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("development"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=development
// --steps=50
// --repeat=20
// --pallet=pallet-loans
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/loans/src/weights.rs
// --template=./scripts/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_loans.
pub trait WeightInfo {
	fn initialise_pool() -> Weight;
	fn create() -> Weight;
	fn price(n: u32) -> Weight;
	fn add_write_off_group() -> Weight;
	fn initial_borrow(n: u32) -> Weight;
	fn further_borrows(n: u32) -> Weight;
	fn repay(n: u32) -> Weight;
	fn write_off(n: u32, m: u32) -> Weight;
	fn admin_write_off(n: u32) -> Weight;
	fn repay_and_close(n: u32) -> Weight;
	fn write_off_and_close(n: u32) -> Weight;
	fn update_nav(n: u32) -> Weight;
}

/// Weights for pallet_loans using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn initialise_pool() -> Weight {
		(49_422_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn create() -> Weight {
		(140_615_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn price(n: u32) -> Weight {
		(57_517_000 as Weight) // Standard Error: 3_000
			.saturating_add((709_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn add_write_off_group() -> Weight {
		(47_368_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn initial_borrow(n: u32) -> Weight {
		(523_675_000 as Weight) // Standard Error: 11_000
			.saturating_add((596_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn further_borrows(n: u32) -> Weight {
		(1_207_859_000 as Weight) // Standard Error: 14_000
			.saturating_add((528_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn repay(n: u32) -> Weight {
		(880_265_000 as Weight) // Standard Error: 15_000
			.saturating_add((599_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn write_off(n: u32, m: u32) -> Weight {
		(778_016_000 as Weight) // Standard Error: 11_000
			.saturating_add((613_000 as Weight).saturating_mul(n as Weight)) // Standard Error: 91_000
			.saturating_add((172_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn admin_write_off(n: u32) -> Weight {
		(789_811_000 as Weight) // Standard Error: 14_000
			.saturating_add((552_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn repay_and_close(n: u32) -> Weight {
		(137_410_000 as Weight) // Standard Error: 8_000
			.saturating_add((636_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn write_off_and_close(n: u32) -> Weight {
		(143_522_000 as Weight) // Standard Error: 8_000
			.saturating_add((623_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn update_nav(n: u32) -> Weight {
		(562_711_000 as Weight) // Standard Error: 8_000
			.saturating_add((5_626_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn initialise_pool() -> Weight {
		(49_422_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn create() -> Weight {
		(140_615_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn price(n: u32) -> Weight {
		(57_517_000 as Weight) // Standard Error: 3_000
			.saturating_add((709_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn add_write_off_group() -> Weight {
		(47_368_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn initial_borrow(n: u32) -> Weight {
		(523_675_000 as Weight) // Standard Error: 11_000
			.saturating_add((596_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	fn further_borrows(n: u32) -> Weight {
		(1_207_859_000 as Weight) // Standard Error: 14_000
			.saturating_add((528_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	fn repay(n: u32) -> Weight {
		(880_265_000 as Weight) // Standard Error: 15_000
			.saturating_add((599_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	fn write_off(n: u32, m: u32) -> Weight {
		(778_016_000 as Weight) // Standard Error: 11_000
			.saturating_add((613_000 as Weight).saturating_mul(n as Weight)) // Standard Error: 91_000
			.saturating_add((172_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn admin_write_off(n: u32) -> Weight {
		(789_811_000 as Weight) // Standard Error: 14_000
			.saturating_add((552_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn repay_and_close(n: u32) -> Weight {
		(137_410_000 as Weight) // Standard Error: 8_000
			.saturating_add((636_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn write_off_and_close(n: u32) -> Weight {
		(143_522_000 as Weight) // Standard Error: 8_000
			.saturating_add((623_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	fn update_nav(n: u32) -> Weight {
		(562_711_000 as Weight) // Standard Error: 8_000
			.saturating_add((5_626_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
}
