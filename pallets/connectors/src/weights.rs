//! Autogenerated weights for pallet_connectors
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-03-02, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("development-local"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// --chain=development-local
// --steps=50
// --repeat=20
// --pallet=pallet-connectors
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/connectors/src/weights.rs
// --template=./scripts/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_connectors.
pub trait WeightInfo {
	fn handle() -> Weight;
	fn add_pool() -> Weight;
	fn add_tranche() -> Weight;
	fn update_token_price() -> Weight;
	fn update_member() -> Weight;
	fn transfer() -> Weight;
	fn add_connector() -> Weight;
	fn set_domain_router() -> Weight;
}

/// Weights for pallet_connectors using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn handle() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64)))
	}

	fn add_connector() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64)))
	}

	fn set_domain_router() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64)))
	}

	fn add_pool() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64)))
	}

	fn add_tranche() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64)))
	}

	fn update_token_price() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64)))
	}

	fn update_member() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64)))
	}

	fn transfer() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64)))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn handle() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64)))
	}

	fn add_connector() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64)))
	}

	fn set_domain_router() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64)))
	}

	fn add_pool() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64)))
	}

	fn add_tranche() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64)))
	}

	fn update_token_price() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64)))
	}

	fn update_member() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64)))
	}

	fn transfer() -> Weight {
		(Weight::from_ref_time(32_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64)))
	}
}
