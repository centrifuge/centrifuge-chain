//! Autogenerated weights for pallet_pool_system
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-16, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("development"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=development
// --steps=50
// --repeat=20
// --pallet=pallet-pool-system
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./scripts/frame-weight-template.hbs
// --output=./pallets/pool-system/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_pool_system.
pub trait WeightInfo {
	fn set_max_reserve() -> Weight;
	fn close_epoch_no_orders(n: u32) -> Weight;
	fn close_epoch_no_execution(n: u32) -> Weight;
	fn close_epoch_execute(n: u32) -> Weight;
	fn submit_solution(n: u32) -> Weight;
	fn execute_epoch(n: u32) -> Weight;
}

/// Weights for pallet_pool_system using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn set_max_reserve() -> Weight {
		Weight::from_ref_time(45_694_000)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	fn close_epoch_no_orders(n: u32) -> Weight {
		Weight::from_ref_time(75_449_625) // Standard Error: 429_338
			.saturating_add(Weight::from_ref_time(76_543_613).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((8 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((8 as u64).saturating_mul(n as u64)))
	}

	fn close_epoch_no_execution(n: u32) -> Weight {
		Weight::from_ref_time(84_884_996) // Standard Error: 208_859
			.saturating_add(Weight::from_ref_time(30_461_352).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((6 as u64).saturating_mul(n as u64)))
	}

	fn close_epoch_execute(n: u32) -> Weight {
		Weight::from_ref_time(174_876_295) // Standard Error: 475_408
			.saturating_add(Weight::from_ref_time(75_923_062).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().reads((8 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
			.saturating_add(T::DbWeight::get().writes((8 as u64).saturating_mul(n as u64)))
	}

	fn submit_solution(n: u32) -> Weight {
		Weight::from_ref_time(45_811_058) // Standard Error: 67_042
			.saturating_add(Weight::from_ref_time(2_201_487).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	fn execute_epoch(n: u32) -> Weight {
		Weight::from_ref_time(136_726_324) // Standard Error: 363_226
			.saturating_add(Weight::from_ref_time(62_906_109).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
			.saturating_add(T::DbWeight::get().writes((6 as u64).saturating_mul(n as u64)))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn set_max_reserve() -> Weight {
		Weight::from_ref_time(45_694_000)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}

	fn close_epoch_no_orders(n: u32) -> Weight {
		Weight::from_ref_time(75_449_625) // Standard Error: 429_338
			.saturating_add(Weight::from_ref_time(76_543_613).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().reads((8 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((8 as u64).saturating_mul(n as u64)))
	}

	fn close_epoch_no_execution(n: u32) -> Weight {
		Weight::from_ref_time(84_884_996) // Standard Error: 208_859
			.saturating_add(Weight::from_ref_time(30_461_352).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
			.saturating_add(RocksDbWeight::get().writes((6 as u64).saturating_mul(n as u64)))
	}

	fn close_epoch_execute(n: u32) -> Weight {
		Weight::from_ref_time(174_876_295) // Standard Error: 475_408
			.saturating_add(Weight::from_ref_time(75_923_062).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().reads((8 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
			.saturating_add(RocksDbWeight::get().writes((8 as u64).saturating_mul(n as u64)))
	}

	fn submit_solution(n: u32) -> Weight {
		Weight::from_ref_time(45_811_058) // Standard Error: 67_042
			.saturating_add(Weight::from_ref_time(2_201_487).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}

	fn execute_epoch(n: u32) -> Weight {
		Weight::from_ref_time(136_726_324) // Standard Error: 363_226
			.saturating_add(Weight::from_ref_time(62_906_109).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(8 as u64))
			.saturating_add(RocksDbWeight::get().writes((6 as u64).saturating_mul(n as u64)))
	}
}
