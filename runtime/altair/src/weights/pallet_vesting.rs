//! Autogenerated weights for pallet_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-02, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("altair-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=altair-dev
// --steps=50
// --repeat=20
// --pallet=pallet_vesting
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/altair/src/weights/pallet_vesting.rs
// --template=./scripts/runtime-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use pallet_vesting::weights::WeightInfo;
use sp_std::marker::PhantomData;

/// Weights for pallet_vesting using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn vest_locked(l: u32, s: u32) -> Weight {
		(73_341_000 as Weight) // Standard Error: 7_000
			.saturating_add((178_000 as Weight).saturating_mul(l as Weight)) // Standard Error: 14_000
			.saturating_add((192_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn vest_unlocked(l: u32, s: u32) -> Weight {
		(74_550_000 as Weight) // Standard Error: 10_000
			.saturating_add((120_000 as Weight).saturating_mul(l as Weight)) // Standard Error: 21_000
			.saturating_add((185_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn vest_other_locked(l: u32, s: u32) -> Weight {
		(74_118_000 as Weight) // Standard Error: 8_000
			.saturating_add((160_000 as Weight).saturating_mul(l as Weight)) // Standard Error: 16_000
			.saturating_add((168_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn vest_other_unlocked(l: u32, s: u32) -> Weight {
		(69_982_000 as Weight) // Standard Error: 8_000
			.saturating_add((184_000 as Weight).saturating_mul(l as Weight)) // Standard Error: 17_000
			.saturating_add((246_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn vested_transfer(l: u32, s: u32) -> Weight {
		(107_495_000 as Weight) // Standard Error: 9_000
			.saturating_add((205_000 as Weight).saturating_mul(l as Weight)) // Standard Error: 19_000
			.saturating_add((211_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn force_vested_transfer(l: u32, s: u32) -> Weight {
		(114_701_000 as Weight) // Standard Error: 10_000
			.saturating_add((109_000 as Weight).saturating_mul(l as Weight)) // Standard Error: 22_000
			.saturating_add((50_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn not_unlocking_merge_schedules(l: u32, s: u32) -> Weight {
		(73_279_000 as Weight) // Standard Error: 9_000
			.saturating_add((205_000 as Weight).saturating_mul(l as Weight)) // Standard Error: 20_000
			.saturating_add((288_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn unlocking_merge_schedules(l: u32, s: u32) -> Weight {
		(73_523_000 as Weight) // Standard Error: 8_000
			.saturating_add((181_000 as Weight).saturating_mul(l as Weight)) // Standard Error: 17_000
			.saturating_add((250_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
}
