//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-02, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("altair-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=altair-dev
// --steps=50
// --repeat=20
// --pallet=pallet_collective
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/altair/src/weights/pallet_collective.rs
// --template=./scripts/runtime-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weights for pallet_collective using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::WeightInfo for WeightInfo<T> {
	fn set_members(m: u32, n: u32, p: u32) -> Weight {
		Weight::from_ref_time(0) // Standard Error: 19_000
			.saturating_add(Weight::from_ref_time(22_905_000).saturating_mul(m as u64)) // Standard Error: 19_000
			.saturating_add(Weight::from_ref_time(191_000).saturating_mul(n as u64)) // Standard Error: 19_000
			.saturating_add(Weight::from_ref_time(30_318_000).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}

	fn execute(b: u32, m: u32) -> Weight {
		Weight::from_ref_time(38_539_000) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(2_000).saturating_mul(b as u64)) // Standard Error: 1_000
			.saturating_add(Weight::from_ref_time(61_000).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}

	fn propose_execute(b: u32, m: u32) -> Weight {
		Weight::from_ref_time(42_495_000) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(4_000).saturating_mul(b as u64)) // Standard Error: 1_000
			.saturating_add(Weight::from_ref_time(104_000).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}

	fn propose_proposed(b: u32, m: u32, p: u32) -> Weight {
		Weight::from_ref_time(50_881_000) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(16_000).saturating_mul(b as u64)) // Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(72_000).saturating_mul(m as u64)) // Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(566_000).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}

	fn vote(m: u32) -> Weight {
		Weight::from_ref_time(78_332_000) // Standard Error: 5_000
			.saturating_add(Weight::from_ref_time(177_000).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	fn close_early_disapproved(m: u32, p: u32) -> Weight {
		Weight::from_ref_time(64_597_000) // Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(135_000).saturating_mul(m as u64)) // Standard Error: 4_000
			.saturating_add(Weight::from_ref_time(465_000).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}

	fn close_early_approved(b: u32, m: u32, p: u32) -> Weight {
		Weight::from_ref_time(66_781_000) // Standard Error: 2_000
			.saturating_add(Weight::from_ref_time(8_000).saturating_mul(b as u64)) // Standard Error: 19_000
			.saturating_add(Weight::from_ref_time(309_000).saturating_mul(m as u64)) // Standard Error: 19_000
			.saturating_add(Weight::from_ref_time(696_000).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}

	fn close_disapproved(m: u32, p: u32) -> Weight {
		Weight::from_ref_time(70_021_000) // Standard Error: 32_000
			.saturating_add(Weight::from_ref_time(69_000).saturating_mul(m as u64)) // Standard Error: 31_000
			.saturating_add(Weight::from_ref_time(829_000).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}

	fn close_approved(b: u32, m: u32, p: u32) -> Weight {
		Weight::from_ref_time(70_618_000) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(16_000).saturating_mul(b as u64)) // Standard Error: 5_000
			.saturating_add(Weight::from_ref_time(227_000).saturating_mul(m as u64)) // Standard Error: 5_000
			.saturating_add(Weight::from_ref_time(607_000).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}

	fn disapprove_proposal(p: u32) -> Weight {
		Weight::from_ref_time(44_283_000) // Standard Error: 3_000
			.saturating_add(Weight::from_ref_time(484_000).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
}
