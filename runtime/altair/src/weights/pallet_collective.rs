//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-26, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("altair-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=altair-dev
// --steps=50
// --repeat=20
// --pallet=pallet_collective
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/altair/src/weights/pallet_collective.rs
// --template=./scripts/runtime-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use pallet_collective::weights::WeightInfo;
use sp_std::marker::PhantomData;

/// Weights for pallet_collective using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn set_members(m: u32, _n: u32, p: u32) -> Weight {
		Weight::from_ref_time(0) // Standard Error: 19_000
			.saturating_add(Weight::from_ref_time(8_165_000).saturating_mul(m as u64)) // Standard Error: 19_000
			.saturating_add(Weight::from_ref_time(10_660_000).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}

	fn execute(b: u32, m: u32) -> Weight {
		Weight::from_ref_time(16_648_000) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(2_000).saturating_mul(b as u64)) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(10_000).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}

	fn propose_execute(b: u32, m: u32) -> Weight {
		Weight::from_ref_time(19_145_000) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(1_000).saturating_mul(b as u64)) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(13_000).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}

	fn propose_proposed(b: u32, m: u32, p: u32) -> Weight {
		Weight::from_ref_time(22_894_000) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(3_000).saturating_mul(b as u64)) // Standard Error: 2_000
			.saturating_add(Weight::from_ref_time(23_000).saturating_mul(m as u64)) // Standard Error: 2_000
			.saturating_add(Weight::from_ref_time(98_000).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}

	fn vote(m: u32) -> Weight {
		Weight::from_ref_time(21_328_000) // Standard Error: 2_000
			.saturating_add(Weight::from_ref_time(37_000).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	fn close_early_disapproved(m: u32, p: u32) -> Weight {
		Weight::from_ref_time(27_201_000) // Standard Error: 1_000
			.saturating_add(Weight::from_ref_time(11_000).saturating_mul(m as u64)) // Standard Error: 1_000
			.saturating_add(Weight::from_ref_time(91_000).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}

	fn close_early_approved(b: u32, m: u32, p: u32) -> Weight {
		Weight::from_ref_time(33_680_000) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(1_000).saturating_mul(b as u64)) // Standard Error: 1_000
			.saturating_add(Weight::from_ref_time(31_000).saturating_mul(m as u64)) // Standard Error: 1_000
			.saturating_add(Weight::from_ref_time(107_000).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}

	fn close_disapproved(m: u32, p: u32) -> Weight {
		Weight::from_ref_time(28_882_000) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(16_000).saturating_mul(m as u64)) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(90_000).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}

	fn close_approved(b: u32, m: u32, p: u32) -> Weight {
		Weight::from_ref_time(36_408_000) // Standard Error: 0
			.saturating_add(Weight::from_ref_time(1_000).saturating_mul(b as u64)) // Standard Error: 2_000
			.saturating_add(Weight::from_ref_time(26_000).saturating_mul(m as u64)) // Standard Error: 2_000
			.saturating_add(Weight::from_ref_time(108_000).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}

	fn disapprove_proposal(p: u32) -> Weight {
		Weight::from_ref_time(18_110_000) // Standard Error: 1_000
			.saturating_add(Weight::from_ref_time(87_000).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
}
