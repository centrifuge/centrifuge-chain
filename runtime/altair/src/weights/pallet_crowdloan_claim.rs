
//! Autogenerated weights for `pallet_crowdloan_claim`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-25, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `runner`, CPU: `Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("altair-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=altair-dev
// --steps=50
// --repeat=20
// --pallet=pallet_crowdloan_claim
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/altair/src/weights/pallet_crowdloan_claim.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_crowdloan_claim`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_crowdloan_claim::WeightInfo for WeightInfo<T> {
	// Storage: CrowdloanClaim CurrIndex (r:1 w:0)
	// Storage: CrowdloanClaim LeaseStart (r:1 w:0)
	// Storage: CrowdloanClaim LeasePeriod (r:1 w:0)
	// Storage: CrowdloanClaim ProcessedClaims (r:1 w:1)
	// Storage: CrowdloanClaim Contributions (r:1 w:0)
	// Storage: CrowdloanReward VestingStart (r:1 w:0)
	// Storage: CrowdloanReward VestingPeriod (r:1 w:0)
	// Storage: CrowdloanReward DirectPayoutRatio (r:1 w:0)
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Balances Locks (r:1 w:1)
	fn claim_reward_ed25519() -> Weight {
		// Minimum execution time: 263_403 nanoseconds.
		Weight::from_ref_time(278_603_000 as u64)
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: CrowdloanClaim CurrIndex (r:1 w:0)
	// Storage: CrowdloanClaim LeaseStart (r:1 w:0)
	// Storage: CrowdloanClaim LeasePeriod (r:1 w:0)
	// Storage: CrowdloanClaim ProcessedClaims (r:1 w:1)
	// Storage: CrowdloanClaim Contributions (r:1 w:0)
	// Storage: CrowdloanReward VestingStart (r:1 w:0)
	// Storage: CrowdloanReward VestingPeriod (r:1 w:0)
	// Storage: CrowdloanReward DirectPayoutRatio (r:1 w:0)
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Balances Locks (r:1 w:1)
	fn claim_reward_sr25519() -> Weight {
		// Minimum execution time: 253_303 nanoseconds.
		Weight::from_ref_time(275_803_000 as u64)
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: CrowdloanClaim CurrIndex (r:1 w:0)
	// Storage: CrowdloanClaim LeaseStart (r:1 w:0)
	// Storage: CrowdloanClaim LeasePeriod (r:1 w:0)
	// Storage: CrowdloanClaim ProcessedClaims (r:1 w:1)
	// Storage: CrowdloanClaim Contributions (r:1 w:0)
	// Storage: CrowdloanReward VestingStart (r:1 w:0)
	// Storage: CrowdloanReward VestingPeriod (r:1 w:0)
	// Storage: CrowdloanReward DirectPayoutRatio (r:1 w:0)
	// Storage: Vesting Vesting (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Balances Locks (r:1 w:1)
	fn claim_reward_ecdsa() -> Weight {
		// Minimum execution time: 234_503 nanoseconds.
		Weight::from_ref_time(268_303_000 as u64)
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: CrowdloanClaim CurrIndex (r:1 w:1)
	// Storage: CrowdloanClaim LeaseStart (r:1 w:1)
	// Storage: CrowdloanClaim LeasePeriod (r:1 w:1)
	// Storage: CrowdloanClaim PrevIndex (r:1 w:0)
	// Storage: CrowdloanClaim Contributions (r:0 w:1)
	// Storage: CrowdloanClaim CrowdloanTrieIndex (r:0 w:1)
	// Storage: CrowdloanClaim LockedAt (r:0 w:1)
	fn initialize() -> Weight {
		// Minimum execution time: 42_101 nanoseconds.
		Weight::from_ref_time(57_200_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: CrowdloanClaim LeaseStart (r:0 w:1)
	fn set_lease_start() -> Weight {
		// Minimum execution time: 25_501 nanoseconds.
		Weight::from_ref_time(26_600_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: CrowdloanClaim LeasePeriod (r:0 w:1)
	fn set_lease_period() -> Weight {
		// Minimum execution time: 23_900 nanoseconds.
		Weight::from_ref_time(26_700_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: CrowdloanClaim Contributions (r:0 w:1)
	fn set_contributions_root() -> Weight {
		// Minimum execution time: 25_900 nanoseconds.
		Weight::from_ref_time(27_901_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: CrowdloanClaim LockedAt (r:0 w:1)
	fn set_locked_at() -> Weight {
		// Minimum execution time: 24_001 nanoseconds.
		Weight::from_ref_time(26_500_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: CrowdloanClaim CrowdloanTrieIndex (r:0 w:1)
	fn set_crowdloan_trie_index() -> Weight {
		// Minimum execution time: 24_300 nanoseconds.
		Weight::from_ref_time(25_000_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}
