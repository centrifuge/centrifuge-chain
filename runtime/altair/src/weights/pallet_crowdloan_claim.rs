
//! Autogenerated weights for `pallet_crowdloan_claim`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-03-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `runner`, CPU: `AMD EPYC 7763 64-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("altair-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=altair-dev
// --steps=50
// --repeat=20
// --pallet=pallet_crowdloan_claim
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/altair/src/weights/pallet_crowdloan_claim.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_crowdloan_claim`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_crowdloan_claim::WeightInfo for WeightInfo<T> {
	/// Storage: CrowdloanClaim CurrIndex (r:1 w:0)
	/// Proof: CrowdloanClaim CurrIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim LeaseStart (r:1 w:0)
	/// Proof: CrowdloanClaim LeaseStart (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim LeasePeriod (r:1 w:0)
	/// Proof: CrowdloanClaim LeasePeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim ProcessedClaims (r:1 w:1)
	/// Proof: CrowdloanClaim ProcessedClaims (max_values: None, max_size: Some(53), added: 2528, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim Contributions (r:1 w:0)
	/// Proof: CrowdloanClaim Contributions (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: CrowdloanReward VestingStart (r:1 w:0)
	/// Proof: CrowdloanReward VestingStart (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanReward VestingPeriod (r:1 w:0)
	/// Proof: CrowdloanReward VestingPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanReward DirectPayoutRatio (r:1 w:0)
	/// Proof: CrowdloanReward DirectPayoutRatio (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(209), added: 2684, mode: MaxEncodedLen)
	fn claim_reward_ed25519() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `639`
		//  Estimated: `6196`
		// Minimum execution time: 273_536_000 picoseconds.
		Weight::from_parts(275_820_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: CrowdloanClaim CurrIndex (r:1 w:0)
	/// Proof: CrowdloanClaim CurrIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim LeaseStart (r:1 w:0)
	/// Proof: CrowdloanClaim LeaseStart (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim LeasePeriod (r:1 w:0)
	/// Proof: CrowdloanClaim LeasePeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim ProcessedClaims (r:1 w:1)
	/// Proof: CrowdloanClaim ProcessedClaims (max_values: None, max_size: Some(53), added: 2528, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim Contributions (r:1 w:0)
	/// Proof: CrowdloanClaim Contributions (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: CrowdloanReward VestingStart (r:1 w:0)
	/// Proof: CrowdloanReward VestingStart (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanReward VestingPeriod (r:1 w:0)
	/// Proof: CrowdloanReward VestingPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanReward DirectPayoutRatio (r:1 w:0)
	/// Proof: CrowdloanReward DirectPayoutRatio (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(209), added: 2684, mode: MaxEncodedLen)
	fn claim_reward_sr25519() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `795`
		//  Estimated: `6196`
		// Minimum execution time: 275_250_000 picoseconds.
		Weight::from_parts(278_065_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: CrowdloanClaim CurrIndex (r:1 w:0)
	/// Proof: CrowdloanClaim CurrIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim LeaseStart (r:1 w:0)
	/// Proof: CrowdloanClaim LeaseStart (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim LeasePeriod (r:1 w:0)
	/// Proof: CrowdloanClaim LeasePeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim ProcessedClaims (r:1 w:1)
	/// Proof: CrowdloanClaim ProcessedClaims (max_values: None, max_size: Some(53), added: 2528, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim Contributions (r:1 w:0)
	/// Proof: CrowdloanClaim Contributions (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: CrowdloanReward VestingStart (r:1 w:0)
	/// Proof: CrowdloanReward VestingStart (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanReward VestingPeriod (r:1 w:0)
	/// Proof: CrowdloanReward VestingPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanReward DirectPayoutRatio (r:1 w:0)
	/// Proof: CrowdloanReward DirectPayoutRatio (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Vesting Vesting (r:1 w:1)
	/// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(209), added: 2684, mode: MaxEncodedLen)
	fn claim_reward_ecdsa() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `691`
		//  Estimated: `6196`
		// Minimum execution time: 258_728_000 picoseconds.
		Weight::from_parts(261_322_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: CrowdloanClaim CurrIndex (r:1 w:1)
	/// Proof: CrowdloanClaim CurrIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim LeaseStart (r:1 w:1)
	/// Proof: CrowdloanClaim LeaseStart (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim LeasePeriod (r:1 w:1)
	/// Proof: CrowdloanClaim LeasePeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim PrevIndex (r:1 w:0)
	/// Proof: CrowdloanClaim PrevIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim Contributions (r:0 w:1)
	/// Proof: CrowdloanClaim Contributions (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim CrowdloanTrieIndex (r:0 w:1)
	/// Proof: CrowdloanClaim CrowdloanTrieIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: CrowdloanClaim LockedAt (r:0 w:1)
	/// Proof: CrowdloanClaim LockedAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1489`
		// Minimum execution time: 27_041_000 picoseconds.
		Weight::from_parts(27_552_000, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: CrowdloanClaim LeaseStart (r:0 w:1)
	/// Proof: CrowdloanClaim LeaseStart (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_lease_start() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_343_000 picoseconds.
		Weight::from_parts(12_764_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: CrowdloanClaim LeasePeriod (r:0 w:1)
	/// Proof: CrowdloanClaim LeasePeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_lease_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_353_000 picoseconds.
		Weight::from_parts(12_764_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: CrowdloanClaim Contributions (r:0 w:1)
	/// Proof: CrowdloanClaim Contributions (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn set_contributions_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_345_000 picoseconds.
		Weight::from_parts(13_676_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: CrowdloanClaim LockedAt (r:0 w:1)
	/// Proof: CrowdloanClaim LockedAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_locked_at() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_153_000 picoseconds.
		Weight::from_parts(12_654_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: CrowdloanClaim CrowdloanTrieIndex (r:0 w:1)
	/// Proof: CrowdloanClaim CrowdloanTrieIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_crowdloan_trie_index() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_304_000 picoseconds.
		Weight::from_parts(12_804_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
