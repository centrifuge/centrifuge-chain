//! Autogenerated weights for `pallet_liquidity_rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `runner`, CPU: `AMD EPYC 7763 64-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("centrifuge-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=centrifuge-dev
// --steps=50
// --repeat=20
// --pallet=pallet_liquidity_rewards
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/centrifuge/src/weights/pallet_liquidity_rewards.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_liquidity_rewards`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_liquidity_rewards::WeightInfo for WeightInfo<T> {
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: LiquidityRewards EndOfEpoch (r:1 w:0)
	/// Proof: LiquidityRewards EndOfEpoch (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `x` is `[0, 20]`.
	/// The range of component `y` is `[0, 50]`.
	/// The range of component `z` is `[0, 50]`.
	fn on_initialize(_x: u32, _y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `295`
		//  Estimated: `1006`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_parts(6_258_684, 1006)
			// Standard Error: 646
			.saturating_add(Weight::from_ref_time(1_471).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: LiquidityRewardsBase Currency (r:1 w:1)
	/// Proof: LiquidityRewardsBase Currency (max_values: None, max_size: Some(863), added: 3338, mode: MaxEncodedLen)
	/// Storage: LiquidityRewardsBase Group (r:1 w:1)
	/// Proof: LiquidityRewardsBase Group (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	/// Storage: LiquidityRewardsBase StakeAccount (r:1 w:1)
	/// Proof: LiquidityRewardsBase StakeAccount (max_values: None, max_size: Some(143), added: 2618, mode: MaxEncodedLen)
	/// Storage: OrmlTokens Accounts (r:1 w:0)
	/// Proof: OrmlTokens Accounts (max_values: None, max_size: Some(129), added: 2604, mode: MaxEncodedLen)
	fn stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `439`
		//  Estimated: `11107`
		// Minimum execution time: 21_000 nanoseconds.
		Weight::from_parts(22_000_000, 11107)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: LiquidityRewardsBase Currency (r:1 w:1)
	/// Proof: LiquidityRewardsBase Currency (max_values: None, max_size: Some(863), added: 3338, mode: MaxEncodedLen)
	/// Storage: LiquidityRewardsBase Group (r:1 w:1)
	/// Proof: LiquidityRewardsBase Group (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	/// Storage: LiquidityRewardsBase StakeAccount (r:1 w:1)
	/// Proof: LiquidityRewardsBase StakeAccount (max_values: None, max_size: Some(143), added: 2618, mode: MaxEncodedLen)
	fn unstake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `176`
		//  Estimated: `8503`
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_parts(17_000_000, 8503)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: LiquidityRewardsBase Currency (r:1 w:0)
	/// Proof: LiquidityRewardsBase Currency (max_values: None, max_size: Some(863), added: 3338, mode: MaxEncodedLen)
	/// Storage: LiquidityRewardsBase Group (r:1 w:0)
	/// Proof: LiquidityRewardsBase Group (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	/// Storage: LiquidityRewardsBase StakeAccount (r:1 w:1)
	/// Proof: LiquidityRewardsBase StakeAccount (max_values: None, max_size: Some(143), added: 2618, mode: MaxEncodedLen)
	fn claim_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `176`
		//  Estimated: `8503`
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_parts(16_000_000, 8503)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: LiquidityRewards NextEpochChanges (r:1 w:1)
	/// Proof: LiquidityRewards NextEpochChanges (max_values: Some(1), max_size: Some(2078), added: 2573, mode: MaxEncodedLen)
	fn set_distributed_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `2573`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_parts(5_000_000, 2573)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: LiquidityRewards NextEpochChanges (r:1 w:1)
	/// Proof: LiquidityRewards NextEpochChanges (max_values: Some(1), max_size: Some(2078), added: 2573, mode: MaxEncodedLen)
	fn set_epoch_duration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `2573`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_parts(6_000_000, 2573)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: LiquidityRewards NextEpochChanges (r:1 w:1)
	/// Proof: LiquidityRewards NextEpochChanges (max_values: Some(1), max_size: Some(2078), added: 2573, mode: MaxEncodedLen)
	fn set_group_weight() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `2573`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_parts(6_000_000, 2573)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: LiquidityRewards NextEpochChanges (r:1 w:1)
	/// Proof: LiquidityRewards NextEpochChanges (max_values: Some(1), max_size: Some(2078), added: 2573, mode: MaxEncodedLen)
	fn set_currency_group() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `2573`
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_parts(6_000_000, 2573)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

