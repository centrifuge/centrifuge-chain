
//! Autogenerated weights for `pallet_pool_registry`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `mq.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("altair-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=altair-dev
// --steps=50
// --repeat=20
// --pallet=pallet_pool_registry
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/altair/src/weights/pallet_pool_registry.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_pool_registry`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_pool_registry::WeightInfo for WeightInfo<T> {
	// Storage: PoolRegistry Pools (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: PoolSystem AccountDeposit (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: OrmlAssetRegistry Metadata (r:2 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: OrmlAssetRegistry LocationToAssetId (r:1 w:1)
	// Storage: Permissions PermissionCount (r:1 w:1)
	// Storage: Permissions Permission (r:1 w:1)
	// Storage: PoolSystem PoolDeposit (r:0 w:1)
	/// The range of component `n` is `[1, 5]`.
	fn register(n: u32, ) -> Weight {
		// Minimum execution time: 62_000 nanoseconds.
		Weight::from_ref_time(45_184_871 as u64)
			// Standard Error: 88_001
			.saturating_add(Weight::from_ref_time(16_917_114 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: PoolSystem EpochExecution (r:1 w:0)
	// Storage: PoolSystem Pool (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Investments ActiveRedeemOrders (r:1 w:0)
	// Storage: PoolSystem ScheduledUpdate (r:0 w:1)
	/// The range of component `n` is `[1, 5]`.
	fn update_no_execution(n: u32, ) -> Weight {
		// Minimum execution time: 36_000 nanoseconds.
		Weight::from_ref_time(36_701_810 as u64)
			// Standard Error: 41_000
			.saturating_add(Weight::from_ref_time(1_842_932 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: PoolSystem EpochExecution (r:1 w:0)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Investments ActiveRedeemOrders (r:1 w:0)
	// Storage: OrmlAssetRegistry Metadata (r:2 w:1)
	// Storage: PoolSystem ScheduledUpdate (r:0 w:1)
	/// The range of component `n` is `[1, 5]`.
	fn update_and_execute(n: u32, ) -> Weight {
		// Minimum execution time: 57_000 nanoseconds.
		Weight::from_ref_time(54_181_425 as u64)
			// Standard Error: 62_532
			.saturating_add(Weight::from_ref_time(6_169_275 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: PoolSystem EpochExecution (r:1 w:0)
	// Storage: PoolSystem ScheduledUpdate (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: Investments ActiveRedeemOrders (r:1 w:0)
	// Storage: OrmlAssetRegistry Metadata (r:2 w:1)
	/// The range of component `n` is `[1, 5]`.
	fn execute_update(n: u32, ) -> Weight {
		// Minimum execution time: 49_000 nanoseconds.
		Weight::from_ref_time(45_816_296 as u64)
			// Standard Error: 36_779
			.saturating_add(Weight::from_ref_time(5_686_390 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: PoolRegistry PoolMetadata (r:0 w:1)
	/// The range of component `n` is `[0, 46]`.
	fn set_metadata(n: u32, ) -> Weight {
		// Minimum execution time: 19_000 nanoseconds.
		Weight::from_ref_time(20_295_122 as u64)
			// Standard Error: 3_109
			.saturating_add(Weight::from_ref_time(10_252 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}
