
//! Autogenerated weights for `pallet_pool_system`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-12, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `runner`, CPU: `Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("altair-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=altair-dev
// --steps=50
// --repeat=20
// --pallet=pallet_pool_system
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/altair/src/weights/pallet_pool_system.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_pool_system`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_pool_system::WeightInfo for WeightInfo<T> {
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: PoolSystem Pool (r:1 w:1)
	fn set_max_reserve() -> Weight {
		// Minimum execution time: 52_101 nanoseconds.
		Weight::from_ref_time(52_901_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: PoolSystem EpochExecution (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:0)
	// Storage: OrmlTokens TotalIssuance (r:1 w:0)
	// Storage: Investments ActiveInvestOrders (r:1 w:1)
	// Storage: Investments InProcessingInvestOrders (r:1 w:1)
	// Storage: Investments InvestOrderId (r:1 w:1)
	// Storage: Investments ActiveRedeemOrders (r:1 w:1)
	// Storage: Investments InProcessingRedeemOrders (r:1 w:1)
	// Storage: Investments RedeemOrderId (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:1 w:0)
	// Storage: Investments ClearedInvestOrders (r:0 w:1)
	// Storage: Investments ClearedRedeemOrders (r:0 w:1)
	/// The range of component `n` is `[1, 5]`.
	fn close_epoch_no_orders(n: u32, ) -> Weight {
		// Minimum execution time: 169_202 nanoseconds.
		Weight::from_ref_time(81_363_379 as u64)
			// Standard Error: 67_367
			.saturating_add(Weight::from_ref_time(91_546_687 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((8 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((8 as u64).saturating_mul(n as u64)))
	}
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: PoolSystem EpochExecution (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:0)
	// Storage: OrmlTokens TotalIssuance (r:1 w:0)
	// Storage: Investments ActiveInvestOrders (r:1 w:1)
	// Storage: Investments InProcessingInvestOrders (r:1 w:1)
	// Storage: Investments InvestOrderId (r:1 w:1)
	// Storage: Investments ActiveRedeemOrders (r:1 w:1)
	// Storage: Investments InProcessingRedeemOrders (r:1 w:1)
	// Storage: Investments RedeemOrderId (r:1 w:1)
	/// The range of component `n` is `[1, 5]`.
	fn close_epoch_no_execution(n: u32, ) -> Weight {
		// Minimum execution time: 125_602 nanoseconds.
		Weight::from_ref_time(89_349_021 as u64)
			// Standard Error: 37_016
			.saturating_add(Weight::from_ref_time(39_093_988 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((6 as u64).saturating_mul(n as u64)))
	}
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: PoolSystem EpochExecution (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:0)
	// Storage: OrmlTokens TotalIssuance (r:1 w:1)
	// Storage: Investments ActiveInvestOrders (r:1 w:1)
	// Storage: Investments InProcessingInvestOrders (r:1 w:1)
	// Storage: Investments InvestOrderId (r:1 w:1)
	// Storage: Investments ActiveRedeemOrders (r:1 w:1)
	// Storage: Investments InProcessingRedeemOrders (r:1 w:1)
	// Storage: Investments RedeemOrderId (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:3 w:3)
	// Storage: System Account (r:2 w:2)
	// Storage: Investments ClearedInvestOrders (r:0 w:1)
	// Storage: Investments ClearedRedeemOrders (r:0 w:1)
	/// The range of component `n` is `[1, 5]`.
	fn close_epoch_execute(n: u32, ) -> Weight {
		// Minimum execution time: 279_404 nanoseconds.
		Weight::from_ref_time(190_021_094 as u64)
			// Standard Error: 83_327
			.saturating_add(Weight::from_ref_time(93_952_832 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().reads((8 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
			.saturating_add(T::DbWeight::get().writes((8 as u64).saturating_mul(n as u64)))
	}
	// Storage: PoolSystem EpochExecution (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:0)
	/// The range of component `n` is `[1, 5]`.
	fn submit_solution(n: u32, ) -> Weight {
		// Minimum execution time: 54_901 nanoseconds.
		Weight::from_ref_time(53_779_317 as u64)
			// Standard Error: 15_443
			.saturating_add(Weight::from_ref_time(2_701_951 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: PoolSystem EpochExecution (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: Investments InProcessingInvestOrders (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:3 w:3)
	// Storage: System Account (r:2 w:2)
	// Storage: OrmlTokens TotalIssuance (r:1 w:1)
	// Storage: Investments InvestOrderId (r:1 w:0)
	// Storage: Investments ActiveInvestOrders (r:1 w:1)
	// Storage: Investments InProcessingRedeemOrders (r:1 w:1)
	// Storage: Investments RedeemOrderId (r:1 w:0)
	// Storage: Investments ActiveRedeemOrders (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Investments ClearedInvestOrders (r:0 w:1)
	// Storage: Investments ClearedRedeemOrders (r:0 w:1)
	/// The range of component `n` is `[1, 5]`.
	fn execute_epoch(n: u32, ) -> Weight {
		// Minimum execution time: 237_403 nanoseconds.
		Weight::from_ref_time(172_163_224 as u64)
			// Standard Error: 43_466
			.saturating_add(Weight::from_ref_time(68_504_560 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
			.saturating_add(T::DbWeight::get().writes((6 as u64).saturating_mul(n as u64)))
	}
}
