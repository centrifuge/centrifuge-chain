
//! Autogenerated weights for `pallet_loans`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-25, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `runner`, CPU: `Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("altair-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=altair-dev
// --steps=50
// --repeat=20
// --pallet=pallet_loans
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/altair/src/weights/pallet_loans.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_loans`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_loans::WeightInfo for WeightInfo<T> {
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: PoolSystem Pool (r:1 w:0)
	// Storage: Loans PoolToLoanNftClass (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolNAV (r:0 w:1)
	// Storage: Loans LoanNftClassToPool (r:0 w:1)
	fn initialise_pool() -> Weight {
		// Minimum execution time: 75_202 nanoseconds.
		Weight::from_ref_time(76_302_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Uniques Asset (r:2 w:2)
	// Storage: Loans LoanNftClassToPool (r:1 w:0)
	// Storage: Loans NextLoanId (r:1 w:1)
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Class (r:2 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: Loans Loan (r:0 w:1)
	// Storage: Uniques Account (r:0 w:3)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	fn create() -> Weight {
		// Minimum execution time: 170_605 nanoseconds.
		Weight::from_ref_time(174_504_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: Loans Loan (r:1 w:1)
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	/// The range of component `n` is `[1, 300]`.
	/// The range of component `m` is `[1, 300]`.
	fn price(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 181_205 nanoseconds.
		Weight::from_ref_time(133_843_894 as u64)
			// Standard Error: 4_353
			.saturating_add(Weight::from_ref_time(856_065 as u64).saturating_mul(n as u64))
			// Standard Error: 4_353
			.saturating_add(Weight::from_ref_time(206_868 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Loans PoolWriteOffGroups (r:1 w:1)
	fn add_write_off_group() -> Weight {
		// Minimum execution time: 70_901 nanoseconds.
		Weight::from_ref_time(73_601_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:0)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	/// The range of component `n` is `[1, 300]`.
	/// The range of component `m` is `[1, 300]`.
	fn initial_borrow(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 264_205 nanoseconds.
		Weight::from_ref_time(263_526_813 as u64)
			// Standard Error: 4_961
			.saturating_add(Weight::from_ref_time(620_301 as u64).saturating_mul(n as u64))
			// Standard Error: 4_961
			.saturating_add(Weight::from_ref_time(81_381 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:0)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	/// The range of component `n` is `[1, 300]`.
	/// The range of component `m` is `[1, 300]`.
	fn further_borrows(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 343_505 nanoseconds.
		Weight::from_ref_time(357_499_319 as u64)
			// Standard Error: 4_397
			.saturating_add(Weight::from_ref_time(499_480 as u64).saturating_mul(n as u64))
			// Standard Error: 4_397
			.saturating_add(Weight::from_ref_time(97_489 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:0)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	/// The range of component `n` is `[1, 300]`.
	/// The range of component `m` is `[1, 300]`.
	fn repay(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 285_103 nanoseconds.
		Weight::from_ref_time(306_345_697 as u64)
			// Standard Error: 4_283
			.saturating_add(Weight::from_ref_time(556_486 as u64).saturating_mul(n as u64))
			// Standard Error: 4_283
			.saturating_add(Weight::from_ref_time(78_363 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:1)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	/// The range of component `n` is `[1, 300]`.
	/// The range of component `m` is `[1, 100]`.
	/// The range of component `o` is `[1, 299]`.
	fn write_off(n: u32, m: u32, o: u32, ) -> Weight {
		// Minimum execution time: 220_505 nanoseconds.
		Weight::from_ref_time(200_365_098 as u64)
			// Standard Error: 3_341
			.saturating_add(Weight::from_ref_time(536_364 as u64).saturating_mul(n as u64))
			// Standard Error: 10_084
			.saturating_add(Weight::from_ref_time(10_275 as u64).saturating_mul(m as u64))
			// Standard Error: 3_352
			.saturating_add(Weight::from_ref_time(170_046 as u64).saturating_mul(o as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:1)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	/// The range of component `n` is `[1, 300]`.
	/// The range of component `m` is `[1, 299]`.
	fn admin_write_off(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 237_204 nanoseconds.
		Weight::from_ref_time(205_809_125 as u64)
			// Standard Error: 3_801
			.saturating_add(Weight::from_ref_time(558_355 as u64).saturating_mul(n as u64))
			// Standard Error: 3_814
			.saturating_add(Weight::from_ref_time(186_042 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:2 w:2)
	// Storage: Loans Loan (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Uniques Class (r:2 w:1)
	// Storage: InterestAccrual Rates (r:1 w:1)
	// Storage: Loans ClosedLoans (r:0 w:1)
	// Storage: Uniques Account (r:0 w:3)
	// Storage: Uniques ItemPriceOf (r:0 w:2)
	/// The range of component `n` is `[1, 300]`.
	/// The range of component `m` is `[1, 300]`.
	fn repay_and_close(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 194_302 nanoseconds.
		Weight::from_ref_time(202_465_463 as u64)
			// Standard Error: 3_113
			.saturating_add(Weight::from_ref_time(549_075 as u64).saturating_mul(n as u64))
			// Standard Error: 3_113
			.saturating_add(Weight::from_ref_time(62_411 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(12 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:2 w:2)
	// Storage: Loans Loan (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Uniques Class (r:2 w:1)
	// Storage: InterestAccrual Rates (r:1 w:1)
	// Storage: Loans ClosedLoans (r:0 w:1)
	// Storage: Uniques Account (r:0 w:3)
	// Storage: Uniques ItemPriceOf (r:0 w:2)
	/// The range of component `n` is `[1, 300]`.
	/// The range of component `m` is `[1, 299]`.
	fn write_off_and_close(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 200_607 nanoseconds.
		Weight::from_ref_time(194_229_515 as u64)
			// Standard Error: 7_328
			.saturating_add(Weight::from_ref_time(692_305 as u64).saturating_mul(n as u64))
			// Standard Error: 7_353
			.saturating_add(Weight::from_ref_time(77_160 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(12 as u64))
	}
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolNAV (r:0 w:1)
	/// The range of component `n` is `[1, 300]`.
	/// The range of component `m` is `[1, 300]`.
	fn update_nav(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 144_603 nanoseconds.
		Weight::from_ref_time(34_939_729 as u64)
			// Standard Error: 18_055
			.saturating_add(Weight::from_ref_time(42_045_542 as u64).saturating_mul(n as u64))
			// Standard Error: 18_055
			.saturating_add(Weight::from_ref_time(411_388 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
