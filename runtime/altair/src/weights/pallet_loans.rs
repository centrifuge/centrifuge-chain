
//! Autogenerated weights for `pallet_loans`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-04, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `branan-laptop`, CPU: `Intel(R) Core(TM) i7-10875H CPU @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("development-local"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=development-local
// --steps=50
// --repeat=20
// --pallet=pallet_loans
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/development/src/weights/pallet_loans.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_loans`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_loans::WeightInfo for WeightInfo<T> {
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: PoolSystem Pool (r:1 w:0)
	// Storage: Loans PoolToLoanNftClass (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolNAV (r:0 w:1)
	// Storage: Loans LoanNftClassToPool (r:0 w:1)
	fn initialise_pool() -> Weight {
		// Minimum execution time: 59_033 nanoseconds.
		Weight::from_ref_time(60_700_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Uniques Asset (r:2 w:2)
	// Storage: Loans LoanNftClassToPool (r:1 w:0)
	// Storage: Loans NextLoanId (r:1 w:1)
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Class (r:2 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: Loans Loan (r:0 w:1)
	// Storage: Uniques Account (r:0 w:3)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	fn create() -> Weight {
		// Minimum execution time: 128_627 nanoseconds.
		Weight::from_ref_time(129_199_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: Loans Loan (r:1 w:1)
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	/// The range of component `n` is `[1, 50]`.
	/// The range of component `m` is `[1, 50]`.
	fn price(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 98_935 nanoseconds.
		Weight::from_ref_time(96_676_390 as u64)
			// Standard Error: 15_520
			.saturating_add(Weight::from_ref_time(1_044_085 as u64).saturating_mul(n as u64))
			// Standard Error: 15_520
			.saturating_add(Weight::from_ref_time(237_179 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Loans PoolWriteOffGroups (r:1 w:1)
	fn add_write_off_group() -> Weight {
		// Minimum execution time: 62_246 nanoseconds.
		Weight::from_ref_time(63_880_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:0)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	/// The range of component `n` is `[1, 50]`.
	/// The range of component `m` is `[1, 50]`.
	fn initial_borrow(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 188_637 nanoseconds.
		Weight::from_ref_time(195_983_686 as u64)
			// Standard Error: 16_012
			.saturating_add(Weight::from_ref_time(520_917 as u64).saturating_mul(n as u64))
			// Standard Error: 16_012
			.saturating_add(Weight::from_ref_time(196_531 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:0)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	/// The range of component `n` is `[1, 50]`.
	/// The range of component `m` is `[1, 50]`.
	fn further_borrows(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 234_810 nanoseconds.
		Weight::from_ref_time(253_208_678 as u64)
			// Standard Error: 21_738
			.saturating_add(Weight::from_ref_time(703_225 as u64).saturating_mul(n as u64))
			// Standard Error: 21_738
			.saturating_add(Weight::from_ref_time(49_932 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:0)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	/// The range of component `n` is `[1, 50]`.
	/// The range of component `m` is `[1, 50]`.
	fn repay(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 211_910 nanoseconds.
		Weight::from_ref_time(226_022_608 as u64)
			// Standard Error: 16_677
			.saturating_add(Weight::from_ref_time(618_506 as u64).saturating_mul(n as u64))
			// Standard Error: 16_677
			.saturating_add(Weight::from_ref_time(27_635 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:1)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	/// The range of component `n` is `[1, 50]`.
	/// The range of component `m` is `[1, 10]`.
	/// The range of component `o` is `[1, 49]`.
	fn write_off(n: u32, _m: u32, o: u32, ) -> Weight {
		// Minimum execution time: 133_276 nanoseconds.
		Weight::from_ref_time(142_405_252 as u64)
			// Standard Error: 16_720
			.saturating_add(Weight::from_ref_time(851_262 as u64).saturating_mul(n as u64))
			// Standard Error: 16_743
			.saturating_add(Weight::from_ref_time(207_991 as u64).saturating_mul(o as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:1)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	/// The range of component `n` is `[1, 50]`.
	/// The range of component `m` is `[1, 49]`.
	fn admin_write_off(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 155_899 nanoseconds.
		Weight::from_ref_time(161_281_536 as u64)
			// Standard Error: 14_046
			.saturating_add(Weight::from_ref_time(683_305 as u64).saturating_mul(n as u64))
			// Standard Error: 14_066
			.saturating_add(Weight::from_ref_time(187_296 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:2 w:2)
	// Storage: Loans Loan (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Uniques Class (r:2 w:1)
	// Storage: InterestAccrual Rates (r:1 w:0)
	// Storage: Loans ClosedLoans (r:0 w:1)
	// Storage: Uniques Account (r:0 w:3)
	// Storage: Uniques ItemPriceOf (r:0 w:2)
	/// The range of component `n` is `[1, 50]`.
	/// The range of component `m` is `[1, 50]`.
	fn repay_and_close(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 153_745 nanoseconds.
		Weight::from_ref_time(164_503_805 as u64)
			// Standard Error: 24_522
			.saturating_add(Weight::from_ref_time(970_414 as u64).saturating_mul(n as u64))
			// Standard Error: 24_522
			.saturating_add(Weight::from_ref_time(90_209 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(11 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:2 w:2)
	// Storage: Loans Loan (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Uniques Class (r:2 w:1)
	// Storage: InterestAccrual Rates (r:1 w:0)
	// Storage: Loans ClosedLoans (r:0 w:1)
	// Storage: Uniques Account (r:0 w:3)
	// Storage: Uniques ItemPriceOf (r:0 w:2)
	/// The range of component `n` is `[1, 50]`.
	/// The range of component `m` is `[1, 49]`.
	fn write_off_and_close(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 152_854 nanoseconds.
		Weight::from_ref_time(157_491_219 as u64)
			// Standard Error: 19_952
			.saturating_add(Weight::from_ref_time(923_707 as u64).saturating_mul(n as u64))
			// Standard Error: 19_981
			.saturating_add(Weight::from_ref_time(287_155 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(11 as u64))
	}
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolNAV (r:0 w:1)
	/// The range of component `n` is `[1, 50]`.
	/// The range of component `m` is `[1, 50]`.
	fn update_nav(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 102_400 nanoseconds.
		Weight::from_ref_time(68_707_198 as u64)
			// Standard Error: 72_609
			.saturating_add(Weight::from_ref_time(29_997_518 as u64).saturating_mul(n as u64))
			// Standard Error: 72_609
			.saturating_add(Weight::from_ref_time(540_170 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
