
//! Autogenerated weights for `pallet_loans`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-12, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `runner`, CPU: `Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("altair-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=altair-dev
// --steps=50
// --repeat=20
// --pallet=pallet_loans
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/altair/src/weights/pallet_loans.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_loans`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_loans::WeightInfo for WeightInfo<T> {
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: PoolSystem Pool (r:1 w:0)
	// Storage: Loans PoolToLoanNftClass (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolNAV (r:0 w:1)
	// Storage: Loans LoanNftClassToPool (r:0 w:1)
	fn initialise_pool() -> Weight {
		// Minimum execution time: 73_001 nanoseconds.
		Weight::from_ref_time(74_801_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Uniques Asset (r:2 w:2)
	// Storage: Loans LoanNftClassToPool (r:1 w:0)
	// Storage: Loans NextLoanId (r:1 w:1)
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Class (r:2 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: Loans Loan (r:0 w:1)
	// Storage: Uniques Account (r:0 w:3)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	fn create() -> Weight {
		// Minimum execution time: 167_302 nanoseconds.
		Weight::from_ref_time(169_702_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: Loans Loan (r:1 w:1)
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rate (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	/// The range of component `n` is `[1, 300]`.
	fn price(n: u32, ) -> Weight {
		// Minimum execution time: 122_402 nanoseconds.
		Weight::from_ref_time(138_060_973 as u64)
			// Standard Error: 4_382
			.saturating_add(Weight::from_ref_time(856_590 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Loans PoolWriteOffGroups (r:1 w:1)
	fn add_write_off_group() -> Weight {
		// Minimum execution time: 70_801 nanoseconds.
		Weight::from_ref_time(72_501_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rate (r:1 w:0)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	/// The range of component `n` is `[1, 300]`.
	fn initial_borrow(n: u32, ) -> Weight {
		// Minimum execution time: 236_403 nanoseconds.
		Weight::from_ref_time(261_536_525 as u64)
			// Standard Error: 5_719
			.saturating_add(Weight::from_ref_time(615_938 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rate (r:1 w:0)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	/// The range of component `n` is `[1, 300]`.
	fn further_borrows(n: u32, ) -> Weight {
		// Minimum execution time: 324_804 nanoseconds.
		Weight::from_ref_time(348_984_194 as u64)
			// Standard Error: 5_425
			.saturating_add(Weight::from_ref_time(588_377 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: InterestAccrual Rate (r:1 w:0)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	/// The range of component `n` is `[1, 300]`.
	fn repay(n: u32, ) -> Weight {
		// Minimum execution time: 286_504 nanoseconds.
		Weight::from_ref_time(306_279_818 as u64)
			// Standard Error: 4_393
			.saturating_add(Weight::from_ref_time(566_454 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rate (r:2 w:2)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: InterestAccrual RateCount (r:1 w:1)
	// Storage: Loans PoolNAV (r:1 w:1)
	/// The range of component `n` is `[1, 300]`.
	/// The range of component `m` is `[1, 100]`.
	fn write_off(n: u32, _m: u32, ) -> Weight {
		// Minimum execution time: 191_003 nanoseconds.
		Weight::from_ref_time(219_001_097 as u64)
			// Standard Error: 2_786
			.saturating_add(Weight::from_ref_time(549_854 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: InterestAccrual Rate (r:2 w:2)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual RateCount (r:1 w:1)
	// Storage: Loans PoolNAV (r:1 w:1)
	/// The range of component `n` is `[1, 300]`.
	fn admin_write_off(n: u32, ) -> Weight {
		// Minimum execution time: 203_003 nanoseconds.
		Weight::from_ref_time(213_225_714 as u64)
			// Standard Error: 4_206
			.saturating_add(Weight::from_ref_time(588_653 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:2 w:2)
	// Storage: Loans Loan (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Uniques Class (r:2 w:1)
	// Storage: InterestAccrual Rate (r:1 w:1)
	// Storage: Loans ClosedLoans (r:0 w:1)
	// Storage: Uniques Account (r:0 w:3)
	// Storage: Uniques ItemPriceOf (r:0 w:2)
	/// The range of component `n` is `[1, 300]`.
	fn repay_and_close(n: u32, ) -> Weight {
		// Minimum execution time: 191_303 nanoseconds.
		Weight::from_ref_time(213_857_279 as u64)
			// Standard Error: 5_553
			.saturating_add(Weight::from_ref_time(676_755 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(12 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:2 w:2)
	// Storage: Loans Loan (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Uniques Class (r:2 w:1)
	// Storage: InterestAccrual Rate (r:1 w:1)
	// Storage: Loans ClosedLoans (r:0 w:1)
	// Storage: Uniques Account (r:0 w:3)
	// Storage: Uniques ItemPriceOf (r:0 w:2)
	/// The range of component `n` is `[1, 300]`.
	fn write_off_and_close(n: u32, ) -> Weight {
		// Minimum execution time: 193_203 nanoseconds.
		Weight::from_ref_time(222_919_685 as u64)
			// Standard Error: 6_971
			.saturating_add(Weight::from_ref_time(623_838 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(12 as u64))
	}
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: InterestAccrual Rate (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolNAV (r:0 w:1)
	/// The range of component `n` is `[1, 300]`.
	fn update_nav(n: u32, ) -> Weight {
		// Minimum execution time: 128_002 nanoseconds.
		Weight::from_ref_time(106_674_201 as u64)
			// Standard Error: 9_618
			.saturating_add(Weight::from_ref_time(49_001_727 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
