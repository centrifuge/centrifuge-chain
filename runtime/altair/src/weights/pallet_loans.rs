
//! Autogenerated weights for `pallet_loans`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `mq.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("altair-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=altair-dev
// --steps=50
// --repeat=20
// --pallet=pallet_loans
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/altair/src/weights/pallet_loans.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_loans`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_loans::WeightInfo for WeightInfo<T> {
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: PoolSystem Pool (r:1 w:0)
	// Storage: Loans PoolToLoanNftClass (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolNAV (r:0 w:1)
	// Storage: Loans LoanNftClassToPool (r:0 w:1)
	fn initialise_pool() -> Weight {
		// Minimum execution time: 31_000 nanoseconds.
		Weight::from_ref_time(33_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Uniques Asset (r:2 w:2)
	// Storage: Loans LoanNftClassToPool (r:1 w:0)
	// Storage: Loans NextLoanId (r:1 w:1)
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Class (r:2 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: Loans Loan (r:0 w:1)
	// Storage: Uniques Account (r:0 w:3)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	fn create() -> Weight {
		// Minimum execution time: 84_000 nanoseconds.
		Weight::from_ref_time(85_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: Loans Loan (r:1 w:1)
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rate (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	/// The range of component `n` is `[1, 300]`.
	fn price(n: u32, ) -> Weight {
		// Minimum execution time: 59_000 nanoseconds.
		Weight::from_ref_time(61_777_061 as u64)
			// Standard Error: 6_569
			.saturating_add(Weight::from_ref_time(551_532 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Loans PoolWriteOffGroups (r:1 w:1)
	fn add_write_off_group() -> Weight {
		// Minimum execution time: 28_000 nanoseconds.
		Weight::from_ref_time(29_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rate (r:1 w:0)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	/// The range of component `n` is `[1, 300]`.
	fn initial_borrow(n: u32, ) -> Weight {
		// Minimum execution time: 117_000 nanoseconds.
		Weight::from_ref_time(120_479_091 as u64)
			// Standard Error: 7_556
			.saturating_add(Weight::from_ref_time(418_070 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rate (r:1 w:0)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	/// The range of component `n` is `[1, 300]`.
	fn further_borrows(n: u32, ) -> Weight {
		// Minimum execution time: 155_000 nanoseconds.
		Weight::from_ref_time(163_259_951 as u64)
			// Standard Error: 7_994
			.saturating_add(Weight::from_ref_time(389_855 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: InterestAccrual Rate (r:1 w:0)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PoolNAV (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	/// The range of component `n` is `[1, 300]`.
	fn repay(n: u32, ) -> Weight {
		// Minimum execution time: 138_000 nanoseconds.
		Weight::from_ref_time(152_003_751 as u64)
			// Standard Error: 6_910
			.saturating_add(Weight::from_ref_time(332_397 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rate (r:2 w:2)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: InterestAccrual RateCount (r:1 w:1)
	// Storage: Loans PoolNAV (r:1 w:1)
	/// The range of component `n` is `[1, 300]`.
	/// The range of component `m` is `[1, 100]`.
	fn write_off(n: u32, m: u32, ) -> Weight {
		// Minimum execution time: 89_000 nanoseconds.
		Weight::from_ref_time(87_957_090 as u64)
			// Standard Error: 4_904
			.saturating_add(Weight::from_ref_time(415_977 as u64).saturating_mul(n as u64))
			// Standard Error: 14_806
			.saturating_add(Weight::from_ref_time(2_503 as u64).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Loans Loan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: InterestAccrual Rate (r:2 w:2)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual RateCount (r:1 w:1)
	// Storage: Loans PoolNAV (r:1 w:1)
	/// The range of component `n` is `[1, 300]`.
	fn admin_write_off(n: u32, ) -> Weight {
		// Minimum execution time: 91_000 nanoseconds.
		Weight::from_ref_time(90_123_169 as u64)
			// Standard Error: 5_654
			.saturating_add(Weight::from_ref_time(442_813 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:2 w:2)
	// Storage: Loans Loan (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Uniques Class (r:2 w:1)
	// Storage: InterestAccrual Rate (r:1 w:1)
	// Storage: Loans ClosedLoans (r:0 w:1)
	// Storage: Uniques Account (r:0 w:3)
	// Storage: Uniques ItemPriceOf (r:0 w:2)
	/// The range of component `n` is `[1, 300]`.
	fn repay_and_close(n: u32, ) -> Weight {
		// Minimum execution time: 94_000 nanoseconds.
		Weight::from_ref_time(103_605_287 as u64)
			// Standard Error: 5_944
			.saturating_add(Weight::from_ref_time(385_886 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(12 as u64))
	}
	// Storage: Loans PoolToLoanNftClass (r:1 w:0)
	// Storage: Uniques Asset (r:2 w:2)
	// Storage: Loans Loan (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Uniques Class (r:2 w:1)
	// Storage: InterestAccrual Rate (r:1 w:1)
	// Storage: Loans ClosedLoans (r:0 w:1)
	// Storage: Uniques Account (r:0 w:3)
	// Storage: Uniques ItemPriceOf (r:0 w:2)
	/// The range of component `n` is `[1, 300]`.
	fn write_off_and_close(n: u32, ) -> Weight {
		// Minimum execution time: 96_000 nanoseconds.
		Weight::from_ref_time(96_853_759 as u64)
			// Standard Error: 5_054
			.saturating_add(Weight::from_ref_time(410_320 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(12 as u64))
	}
	// Storage: Loans PoolWriteOffGroups (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: InterestAccrual Rate (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PoolNAV (r:0 w:1)
	/// The range of component `n` is `[1, 300]`.
	fn update_nav(n: u32, ) -> Weight {
		// Minimum execution time: 57_000 nanoseconds.
		Weight::from_ref_time(18_182_238 as u64)
			// Standard Error: 42_035
			.saturating_add(Weight::from_ref_time(25_349_551 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
