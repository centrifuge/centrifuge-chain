
//! Autogenerated weights for `pallet_keystore`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-26, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `runner`, CPU: `AMD EPYC 7763 64-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("altair-dev"), DB CACHE: 1024

// Executed Command:
// target/release/altair
// benchmark
// pallet
// --chain=altair-dev
// --steps=50
// --repeat=20
// --pallet=pallet_keystore
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/altair/src/weights/pallet_keystore.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_keystore`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_keystore::WeightInfo for WeightInfo<T> {
	// Storage: Keystore KeyDeposit (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Keystore Keys (r:1 w:1)
	// Storage: Keystore LastKeyByPurpose (r:0 w:1)
	/// The range of component `n` is `[1, 10]`.
	fn add_keys(n: u32, ) -> Weight {
		// Minimum execution time: 46_877 nanoseconds.
		Weight::from_ref_time(27_236_613)
			// Standard Error: 12_118
			.saturating_add(Weight::from_ref_time(21_832_427).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	// Storage: Keystore Keys (r:1 w:1)
	/// The range of component `n` is `[1, 10]`.
	fn revoke_keys(n: u32, ) -> Weight {
		// Minimum execution time: 30_968 nanoseconds.
		Weight::from_ref_time(20_261_880)
			// Standard Error: 13_719
			.saturating_add(Weight::from_ref_time(12_291_737).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	// Storage: Keystore KeyDeposit (r:0 w:1)
	fn set_deposit() -> Weight {
		// Minimum execution time: 20_428 nanoseconds.
		Weight::from_ref_time(21_119_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
