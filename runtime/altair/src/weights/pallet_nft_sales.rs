
//! Autogenerated weights for `pallet_nft_sales`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `mq.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("altair-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=altair-dev
// --steps=50
// --repeat=20
// --pallet=pallet_nft_sales
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/altair/src/weights/pallet_nft_sales.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_nft_sales`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_nft_sales::WeightInfo for WeightInfo<T> {
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: NftSales Sales (r:1 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: Uniques Account (r:0 w:2)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	// Storage: NftSales NftsBySeller (r:0 w:1)
	fn add() -> Weight {
		// Minimum execution time: 42_000 nanoseconds.
		Weight::from_ref_time(43_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: NftSales Sales (r:1 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques Account (r:0 w:1)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	// Storage: NftSales NftsBySeller (r:0 w:1)
	fn remove() -> Weight {
		// Minimum execution time: 42_000 nanoseconds.
		Weight::from_ref_time(45_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: NftSales Sales (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques Account (r:0 w:2)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	// Storage: NftSales NftsBySeller (r:0 w:1)
	fn buy() -> Weight {
		// Minimum execution time: 70_000 nanoseconds.
		Weight::from_ref_time(73_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
}
