//! Autogenerated weights for pallet_pools
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-26, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("altair-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=altair-dev
// --steps=50
// --repeat=20
// --pallet=pallet_pools
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/altair/src/weights/pallet_pools.rs
// --template=./scripts/runtime-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use pallet_pools::weights::WeightInfo;
use sp_std::marker::PhantomData;

/// Weights for pallet_pools using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn update_no_execution(n: u32) -> Weight {
		(Weight::from_ref_time(28_660_000)) // Standard Error: 17_000
			.saturating_add((Weight::from_ref_time(285_000)).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	fn update_and_execute(n: u32) -> Weight {
		(Weight::from_ref_time(47_893_000)) // Standard Error: 40_000
			.saturating_add((Weight::from_ref_time(716_000)).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}

	fn execute_update(n: u32) -> Weight {
		(Weight::from_ref_time(45_439_000)) // Standard Error: 64_000
			.saturating_add((Weight::from_ref_time(1_074_000)).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}

	fn set_max_reserve() -> Weight {
		Weight::from_ref_time(23_000_000)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	fn update_invest_order() -> Weight {
		Weight::from_ref_time(57_000_000)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}

	fn update_redeem_order() -> Weight {
		Weight::from_ref_time(56_000_000)
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}

	fn collect(n: u32) -> Weight {
		Weight::from_ref_time(41_914_000) // Standard Error: 5_000
			.saturating_add(Weight::from_ref_time(3_352_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}

	fn close_epoch_no_orders(n: u32) -> Weight {
		Weight::from_ref_time(29_769_000) // Standard Error: 18_000
			.saturating_add(Weight::from_ref_time(3_731_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(n as u64)))
	}

	fn close_epoch_no_execution(n: u32) -> Weight {
		Weight::from_ref_time(32_410_000) // Standard Error: 12_000
			.saturating_add(Weight::from_ref_time(2_694_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}

	fn close_epoch_execute(n: u32) -> Weight {
		Weight::from_ref_time(56_423_000) // Standard Error: 26_000
			.saturating_add(Weight::from_ref_time(5_093_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(n as u64)))
	}

	fn submit_solution(n: u32) -> Weight {
		Weight::from_ref_time(22_188_000) // Standard Error: 14_000
			.saturating_add(Weight::from_ref_time(828_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	fn execute_epoch(n: u32) -> Weight {
		Weight::from_ref_time(50_960_000) // Standard Error: 20_000
			.saturating_add(Weight::from_ref_time(2_719_000).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(n as u64)))
	}
}
