
//! Autogenerated weights for `pallet_loans_ref`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-04, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `runner`, CPU: `Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("centrifuge-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=centrifuge-dev
// --steps=50
// --repeat=20
// --pallet=pallet_loans_ref
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/centrifuge/src/weights/pallet_loans_ref.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_loans_ref`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_loans_ref::WeightInfo for WeightInfo<T> {
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: Loans LastLoanId (r:1 w:1)
	// Storage: Loans CreatedLoan (r:0 w:1)
	// Storage: Uniques Account (r:0 w:2)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	fn create() -> Weight {
		// Minimum execution time: 107_902 nanoseconds.
		Weight::from_ref_time(117_103_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Loans CreatedLoan (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:1)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PortfolioValuation (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	/// The range of component `n` is `[1, 999]`.
	fn borrow(n: u32, ) -> Weight {
		// Minimum execution time: 282_307 nanoseconds.
		Weight::from_ref_time(283_899_253 as u64)
			// Standard Error: 4_981
			.saturating_add(Weight::from_ref_time(800_531 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: Loans PortfolioValuation (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: InterestAccrual Rates (r:1 w:0)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	/// The range of component `n` is `[1, 999]`.
	fn repay(n: u32, ) -> Weight {
		// Minimum execution time: 275_706 nanoseconds.
		Weight::from_ref_time(285_156_089 as u64)
			// Standard Error: 3_346
			.saturating_add(Weight::from_ref_time(741_436 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Loans PortfolioValuation (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: InterestAccrual Rates (r:1 w:1)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans WriteOffPolicy (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[1, 999]`.
	fn write_off(n: u32, ) -> Weight {
		// Minimum execution time: 272_906 nanoseconds.
		Weight::from_ref_time(280_572_778 as u64)
			// Standard Error: 4_555
			.saturating_add(Weight::from_ref_time(784_789 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Loans PortfolioValuation (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: InterestAccrual Rates (r:1 w:1)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans WriteOffPolicy (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[1, 999]`.
	fn admin_write_off(n: u32, ) -> Weight {
		// Minimum execution time: 303_808 nanoseconds.
		Weight::from_ref_time(336_592_045 as u64)
			// Standard Error: 4_711
			.saturating_add(Weight::from_ref_time(717_323 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Loans CreatedLoan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: InterestAccrual Rates (r:1 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Loans ClosedLoan (r:0 w:1)
	// Storage: Uniques Account (r:0 w:2)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	/// The range of component `n` is `[1, 999]`.
	fn close(n: u32, ) -> Weight {
		// Minimum execution time: 161_703 nanoseconds.
		Weight::from_ref_time(166_436_250 as u64)
			// Standard Error: 4_529
			.saturating_add(Weight::from_ref_time(812_309 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: PoolSystem Pool (r:1 w:0)
	// Storage: Loans WriteOffPolicy (r:0 w:1)
	fn update_write_off_policy() -> Weight {
		// Minimum execution time: 69_202 nanoseconds.
		Weight::from_ref_time(70_601_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: PoolSystem Pool (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PortfolioValuation (r:0 w:1)
	/// The range of component `n` is `[1, 1000]`.
	fn update_portfolio_valuation(n: u32, ) -> Weight {
		// Minimum execution time: 120_103 nanoseconds.
		Weight::from_ref_time(128_977_918 as u64)
			// Standard Error: 3_534
			.saturating_add(Weight::from_ref_time(13_717_915 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}
