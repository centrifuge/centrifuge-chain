
//! Autogenerated weights for `pallet_loans`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-26, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `runner`, CPU: `AMD EPYC 7763 64-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("centrifuge-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=centrifuge-dev
// --steps=50
// --repeat=20
// --pallet=pallet_loans
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/centrifuge/src/weights/pallet_loans.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_loans`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_loans::WeightInfo for WeightInfo<T> {
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: Loans LastLoanId (r:1 w:1)
	// Storage: Loans CreatedLoan (r:0 w:1)
	// Storage: Uniques Account (r:0 w:2)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	fn create() -> Weight {
		// Minimum execution time: 89_537 nanoseconds.
		Weight::from_ref_time(91_060_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Loans CreatedLoan (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:1)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: Loans PortfolioValuation (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	/// The range of component `n` is `[1, 999]`.
	fn borrow(n: u32, ) -> Weight {
		// Minimum execution time: 251_890 nanoseconds.
		Weight::from_ref_time(273_565_605)
			// Standard Error: 2_350
			.saturating_add(Weight::from_ref_time(644_110).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Loans PortfolioValuation (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:0)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: OrmlTokens Accounts (r:2 w:2)
	// Storage: System Account (r:1 w:0)
	/// The range of component `n` is `[1, 999]`.
	fn repay(n: u32, ) -> Weight {
		// Minimum execution time: 185_066 nanoseconds.
		Weight::from_ref_time(207_612_048)
			// Standard Error: 3_009
			.saturating_add(Weight::from_ref_time(629_121).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Loans PortfolioValuation (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans WriteOffPolicy (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:1)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	/// The range of component `n` is `[1, 999]`.
	fn write_off(n: u32, ) -> Weight {
		// Minimum execution time: 350_203 nanoseconds.
		Weight::from_ref_time(365_819_358)
			// Standard Error: 2_270
			.saturating_add(Weight::from_ref_time(635_015).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: Loans PortfolioValuation (r:1 w:1)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: Loans WriteOffPolicy (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:1)
	// Storage: InterestAccrual LastUpdated (r:1 w:0)
	/// The range of component `n` is `[1, 999]`.
	fn admin_write_off(n: u32, ) -> Weight {
		// Minimum execution time: 359_230 nanoseconds.
		Weight::from_ref_time(386_280_476)
			// Standard Error: 2_103
			.saturating_add(Weight::from_ref_time(631_826).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Loans CreatedLoan (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:1)
	// Storage: InterestAccrual Rates (r:1 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Loans ClosedLoan (r:0 w:1)
	// Storage: Uniques Account (r:0 w:2)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	/// The range of component `n` is `[1, 999]`.
	fn close(n: u32, ) -> Weight {
		// Minimum execution time: 147_966 nanoseconds.
		Weight::from_ref_time(162_508_504)
			// Standard Error: 1_924
			.saturating_add(Weight::from_ref_time(602_264).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: PoolSystem Pool (r:1 w:0)
	// Storage: Loans WriteOffPolicy (r:0 w:1)
	fn update_write_off_policy() -> Weight {
		// Minimum execution time: 96_169 nanoseconds.
		Weight::from_ref_time(97_501_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: PoolSystem Pool (r:1 w:0)
	// Storage: InterestAccrual Rates (r:1 w:0)
	// Storage: Loans ActiveLoans (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Loans PortfolioValuation (r:1 w:1)
	/// The range of component `n` is `[1, 1000]`.
	fn update_portfolio_valuation(n: u32, ) -> Weight {
		// Minimum execution time: 88_244 nanoseconds.
		Weight::from_ref_time(92_924_938)
			// Standard Error: 1_332
			.saturating_add(Weight::from_ref_time(10_008_833).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
