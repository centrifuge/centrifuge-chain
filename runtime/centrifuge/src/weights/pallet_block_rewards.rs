
//! Autogenerated weights for `pallet_block_rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-26, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `runner`, CPU: `AMD EPYC 7763 64-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("centrifuge-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=centrifuge-dev
// --steps=50
// --repeat=20
// --pallet=pallet_block_rewards
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/centrifuge/src/weights/pallet_block_rewards.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_block_rewards`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_block_rewards::WeightInfo for WeightInfo<T> {
	// Storage: BlockRewardsBase Currency (r:1 w:0)
	// Storage: BlockRewardsBase Group (r:1 w:0)
	// Storage: BlockRewardsBase StakeAccount (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	fn claim_reward() -> Weight {
		// Minimum execution time: 73_037 nanoseconds.
		Weight::from_ref_time(74_118_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: BlockRewards NextSessionChanges (r:1 w:1)
	// Storage: BlockRewards ActiveSessionData (r:1 w:0)
	fn set_collator_reward() -> Weight {
		// Minimum execution time: 15_910 nanoseconds.
		Weight::from_ref_time(16_321_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: BlockRewards NextSessionChanges (r:1 w:1)
	// Storage: BlockRewards ActiveSessionData (r:1 w:0)
	fn set_total_reward() -> Weight {
		// Minimum execution time: 14_707 nanoseconds.
		Weight::from_ref_time(15_509_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
