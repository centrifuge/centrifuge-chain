
//! Autogenerated weights for `pallet_block_rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Laptop.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("centrifuge-local"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=centrifuge_local
// --steps=50
// --repeat=20
// --pallet=pallet_block_rewards
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/development/src/weights/pallet_block_rewards.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_block_rewards`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_block_rewards::weights::WeightInfo for WeightInfo<T> {
	// Storage: BlockRewardsBase Currencies (r:1 w:0)
	// Storage: BlockRewardsBase Groups (r:1 w:0)
	// Storage: BlockRewardsBase StakeAccounts (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	fn claim_reward() -> Weight {
		// Minimum execution time: 46_000 nanoseconds.
		Weight::from_ref_time(48_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: BlockRewards NextSessionChanges (r:1 w:1)
	fn set_collator_reward() -> Weight {
		// Minimum execution time: 7_000 nanoseconds.
		Weight::from_ref_time(7_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: BlockRewards NextSessionChanges (r:1 w:1)
	// Storage: BlockRewards ActiveSessionData (r:1 w:0)
	fn set_total_reward() -> Weight {
		// Minimum execution time: 9_000 nanoseconds.
		Weight::from_ref_time(9_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}
