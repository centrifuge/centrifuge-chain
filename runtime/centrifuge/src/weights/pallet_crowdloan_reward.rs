//! Autogenerated weights for pallet_crowdloan_reward
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-02, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("centrifuge-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=centrifuge-dev
// --steps=50
// --repeat=20
// --pallet=pallet_crowdloan_reward
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/centrifuge/src/weights/pallet_crowdloan_reward.rs
// --template=./scripts/runtime-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weights for pallet_crowdloan_reward using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_crowdloan_reward::WeightInfo for WeightInfo<T> {
	fn initialize() -> Weight {
		Weight::from_ref_time(30_990_000).saturating_add(T::DbWeight::get().writes(3 as u64))
	}

	fn set_vesting_start() -> Weight {
		Weight::from_ref_time(27_518_000).saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	fn set_vesting_period() -> Weight {
		Weight::from_ref_time(27_468_000).saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	fn set_direct_payout_ratio() -> Weight {
		Weight::from_ref_time(27_675_000).saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}
