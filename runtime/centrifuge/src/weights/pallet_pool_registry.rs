
//! Autogenerated weights for `pallet_pool_registry`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-22, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `runner`, CPU: `Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("centrifuge-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=centrifuge-dev
// --steps=50
// --repeat=20
// --pallet=pallet_pool_registry
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/centrifuge/src/weights/pallet_pool_registry.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_pool_registry`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_pool_registry::WeightInfo for WeightInfo<T> {
	// Storage: PoolRegistry Pools (r:1 w:1)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: PoolSystem AccountDeposit (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: OrmlAssetRegistry Metadata (r:2 w:1)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: OrmlAssetRegistry LocationToAssetId (r:1 w:1)
	// Storage: Permissions PermissionCount (r:1 w:1)
	// Storage: Permissions Permission (r:1 w:1)
	// Storage: PoolSystem PoolDeposit (r:0 w:1)
	/// The range of component `n` is `[1, 5]`.
	fn register(n: u32, ) -> Weight {
		// Minimum execution time: 153_701 nanoseconds.
		Weight::from_ref_time(130_621_961 as u64)
			// Standard Error: 47_463
			.saturating_add(Weight::from_ref_time(27_412_623 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: PoolSystem EpochExecution (r:1 w:0)
	// Storage: PoolSystem Pool (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Investments ActiveRedeemOrders (r:1 w:0)
	// Storage: PoolSystem ScheduledUpdate (r:0 w:1)
	/// The range of component `n` is `[1, 5]`.
	fn update_no_execution(n: u32, ) -> Weight {
		// Minimum execution time: 80_700 nanoseconds.
		Weight::from_ref_time(79_392_700 as u64)
			// Standard Error: 19_932
			.saturating_add(Weight::from_ref_time(3_055_725 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: PoolSystem EpochExecution (r:1 w:0)
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Investments ActiveRedeemOrders (r:1 w:0)
	// Storage: OrmlAssetRegistry Metadata (r:2 w:1)
	// Storage: PoolSystem ScheduledUpdate (r:0 w:1)
	/// The range of component `n` is `[1, 5]`.
	fn update_and_execute(n: u32, ) -> Weight {
		// Minimum execution time: 120_600 nanoseconds.
		Weight::from_ref_time(114_181_198 as u64)
			// Standard Error: 41_942
			.saturating_add(Weight::from_ref_time(9_471_671 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: PoolSystem Pool (r:1 w:1)
	// Storage: PoolSystem EpochExecution (r:1 w:0)
	// Storage: PoolSystem ScheduledUpdate (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Investments ActiveRedeemOrders (r:1 w:0)
	// Storage: OrmlAssetRegistry Metadata (r:2 w:1)
	/// The range of component `n` is `[1, 5]`.
	fn execute_update(n: u32, ) -> Weight {
		// Minimum execution time: 108_001 nanoseconds.
		Weight::from_ref_time(100_506_669 as u64)
			// Standard Error: 37_522
			.saturating_add(Weight::from_ref_time(9_769_407 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Permissions Permission (r:1 w:0)
	// Storage: PoolRegistry PoolMetadata (r:0 w:1)
	/// The range of component `n` is `[0, 46]`.
	fn set_metadata(n: u32, ) -> Weight {
		// Minimum execution time: 44_700 nanoseconds.
		Weight::from_ref_time(46_564_432 as u64)
			// Standard Error: 7_447
			.saturating_add(Weight::from_ref_time(12_968 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}
