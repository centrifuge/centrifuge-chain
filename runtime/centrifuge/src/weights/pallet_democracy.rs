//! Autogenerated weights for pallet_democracy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-02, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("altair-dev"), DB CACHE: 1024

// Executed Command:
// target/release/centrifuge-chain
// benchmark
// pallet
// --chain=altair-dev
// --steps=50
// --repeat=20
// --pallet=pallet_democracy
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/runtime/altair/src/weights/pallet_democracy.rs
// --template=./scripts/runtime-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weights for pallet_democracy using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_democracy::WeightInfo for WeightInfo<T> {
	fn propose() -> Weight {
		Weight::from_ref_time(118_809_000)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}

	fn second() -> Weight {
		todo!()
	}

	fn vote_new() -> Weight {
		todo!()
	}

	fn vote_existing() -> Weight {
		todo!()
	}

	fn emergency_cancel() -> Weight {
		todo!()
	}

	fn blacklist() -> Weight {
		todo!()
	}

	fn external_propose() -> Weight {
		todo!()
	}

	fn external_propose_majority() -> Weight {
		todo!()
	}

	fn external_propose_default() -> Weight {
		todo!()
	}

	fn fast_track() -> Weight {
		todo!()
	}

	fn veto_external() -> Weight {
		todo!()
	}

	fn cancel_proposal() -> Weight {
		todo!()
	}

	fn cancel_referendum() -> Weight {
		todo!()
	}

	fn on_initialize_base(_r: u32) -> Weight {
		todo!()
	}

	fn on_initialize_base_with_launch_period(_r: u32) -> Weight {
		todo!()
	}

	fn delegate(_r: u32) -> Weight {
		todo!()
	}

	fn undelegate(_r: u32) -> Weight {
		todo!()
	}

	fn clear_public_proposals() -> Weight {
		todo!()
	}

	fn unlock_remove(_r: u32) -> Weight {
		todo!()
	}

	fn unlock_set(_r: u32) -> Weight {
		todo!()
	}

	fn remove_vote(_r: u32) -> Weight {
		todo!()
	}

	fn remove_other_vote(_r: u32) -> Weight {
		todo!()
	}
}
