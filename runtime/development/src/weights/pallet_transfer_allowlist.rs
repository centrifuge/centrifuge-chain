
//! Autogenerated weights for `pallet_transfer_allowlist`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-11, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Theas-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("development-local"), DB CACHE: 1024

// Executed Command:
// /Users/thealeake/centrifuge-repos/centrifuge-chain/target/release/centrifuge-chain
// benchmark
// pallet
// --chain=development-local
// --steps=50
// --repeat=20
// --pallet=pallet_transfer_allowlist
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=/tmp/pallet_transfer_allowlist.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_transfer_allowlist`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_transfer_allowlist::WeightInfo for WeightInfo<T> {
	// Storage: TransferAllowList AccountCurrencyTransferCountDelay (r:1 w:1)
	// Storage: TransferAllowList AccountCurrencyTransferAllowance (r:1 w:1)
	// Storage: Fees FeeBalances (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn add_transfer_allowance_no_existing_metadata() -> Weight {
		// Minimum execution time: 40_000 nanoseconds.
		Weight::from_ref_time(41_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: TransferAllowList AccountCurrencyTransferCountDelay (r:1 w:1)
	// Storage: TransferAllowList AccountCurrencyTransferAllowance (r:1 w:1)
	// Storage: Fees FeeBalances (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn add_transfer_allowance_existing_metadata() -> Weight {
		// Minimum execution time: 43_000 nanoseconds.
		Weight::from_ref_time(43_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: TransferAllowList AccountCurrencyTransferCountDelay (r:1 w:1)
	fn add_allowance_delay_no_existing_metadata() -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_ref_time(18_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TransferAllowList AccountCurrencyTransferCountDelay (r:1 w:1)
	fn add_allowance_delay_existing_metadata() -> Weight {
		// Minimum execution time: 19_000 nanoseconds.
		Weight::from_ref_time(20_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TransferAllowList AccountCurrencyTransferCountDelay (r:1 w:1)
	fn toggle_allowance_delay_once_future_modifiable() -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(20_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TransferAllowList AccountCurrencyTransferCountDelay (r:1 w:1)
	fn update_allowance_delay() -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(21_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TransferAllowList AccountCurrencyTransferCountDelay (r:1 w:1)
	fn purge_allowance_delay_no_remaining_metadata() -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(21_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TransferAllowList AccountCurrencyTransferCountDelay (r:1 w:1)
	fn purge_allowance_delay_remaining_metadata() -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(21_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TransferAllowList AccountCurrencyTransferCountDelay (r:1 w:0)
	// Storage: TransferAllowList AccountCurrencyTransferAllowance (r:1 w:1)
	fn remove_transfer_allowance_delay_present() -> Weight {
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_ref_time(27_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TransferAllowList AccountCurrencyTransferCountDelay (r:1 w:0)
	// Storage: TransferAllowList AccountCurrencyTransferAllowance (r:1 w:1)
	fn remove_transfer_allowance_no_delay() -> Weight {
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_ref_time(27_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: TransferAllowList AccountCurrencyTransferAllowance (r:1 w:1)
	// Storage: Fees FeeBalances (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: TransferAllowList AccountCurrencyTransferCountDelay (r:1 w:1)
	fn purge_transfer_allowance_no_remaining_metadata() -> Weight {
		// Minimum execution time: 43_000 nanoseconds.
		Weight::from_ref_time(43_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: TransferAllowList AccountCurrencyTransferAllowance (r:1 w:1)
	// Storage: Fees FeeBalances (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: TransferAllowList AccountCurrencyTransferCountDelay (r:1 w:1)
	fn purge_transfer_allowance_remaining_metadata() -> Weight {
		// Minimum execution time: 43_000 nanoseconds.
		Weight::from_ref_time(44_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
